{"version":3,"sources":["utils.js","components/Board/Board.js","components/Info/Info.js","components/GomokuApp/GomokuApp.js","index.js"],"names":["generateWinCombinationTab","Ctab","Array","fill","map","win","i","w","j","Math","floor","index","generateWinCountTab","calculateWinPoint","rowIndex","colIndex","winCombinationTab","winCountTab","winCombinations","reduce","pre","cur","push","selected","ele","findWinner","current","position","identity","horizontal","slice","vertical","concat","diagonalNegative","diagonalPositive","isContinuous","arr","target","len","check","BoardContainer","boardMargin","Board","setState","state","init","board","document","getElementById","width","parseInt","window","getComputedStyle","height","boardWidth","boardHeight","cellWidth","getContext","context","clearRect","beginPath","cellAmount","moveTo","lineTo","stroke","history","length","squares","forEach","row","col","arc","PI","fillStyle","addEventListener","func","delay","timer","clearTimeout","setTimeout","debounce","handleClick","useCallback","e","mode","blackIsNext","winner","x","pageX","offsetLeft","y","pageY","offsetTop","offsetX","offsetY","JSON","parse","stringify","stepNumber","xIndex","yIndex","historyWinCountTab","currentWinCountTab","winCount","useEffect","playerMaxPoint","point","computerMaxPoint","filter","crossAmount","playerCurrentPoint","computerCurrentPoint","id","onClick","InfoContainer","StatusBar","Title","Mode","Status","Round","ToolBar","History","Input","Info","status","inputDiv","useRef","handleKeyDown","key","step","Number","value","blur","selectedMode","round","htmlFor","ref","onKeyDown","GameContainer","Popup","props","$showPopup","OrderPicker","OrderButton","ModePicker","RestartButton","AIButton","GomokuApp","useState","showPopup","setShowPopup","handleSelectMode","classList","contains","handleSelectOrder","className","ReactDOM","render"],"mappings":"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","file":"static/js/main.9e134322.chunk.js","sourcesContent":["export function generateWinCombinationTab() {\r\n  const Ctab =  Array(19).fill(false).map(() => new Array(19).fill(false).map(() =>　new Array(1020).fill(false)))\r\n  let win = 0\r\n  // 橫的獲勝組合\r\n  for (let i = 0; i < 19; i++) {\r\n    let w = 0\r\n    while (w + 4 < 19) {\r\n      for (let j = w; j < w + 5; j++) {\r\n        Ctab[i][j][Math.floor(win/5)] = true\r\n        win++\r\n      }\r\n      w++\r\n    }\r\n  }\r\n  // 直的獲勝組合\r\n  for (let i = 0; i < 19; i++) {\r\n    let w = 0\r\n    while (w + 4 < 19) {\r\n      for (let j = w; j < w + 5; j++) {\r\n        Ctab[j][i][Math.floor(win/5)] = true\r\n        win++\r\n      }\r\n      w++\r\n    }\r\n  }\r\n  // 正對角的獲勝組合\r\n  for (let i = 0; i < 19 - 4; i++) {\r\n    let w = 0\r\n    while (w + 4 < 19) {\r\n      let index = 0\r\n      for (let j = w; j < w + 5; j++) {\r\n        Ctab[i + index][j][Math.floor(win/5)] = true\r\n        index++\r\n        win++\r\n      }\r\n      w++\r\n    }\r\n  }\r\n  // 反對角的獲勝組合\r\n  for (let i = 4; i < 19; i++) {\r\n    let w = 0\r\n    while (w + 4 < 19) {\r\n      let index = 0\r\n      for (let j = w; j < w + 5; j++) {\r\n        Ctab[i - index][j][Math.floor(win/5)] = true\r\n        index++\r\n        win++\r\n      }\r\n      w++\r\n    }\r\n  }\r\n  return Ctab\r\n}\r\n\r\nexport function generateWinCountTab() {\r\n  return Array(2).fill(0).map(() => Array(1020).fill(0))\r\n}\r\n\r\nexport function calculateWinPoint(rowIndex, colIndex, winCombinationTab, winCountTab) {\r\n  const winCombinations = winCombinationTab[rowIndex][colIndex].reduce((pre, cur, index) => {\r\n    if (cur) {\r\n      pre.push(index)\r\n    }\r\n    return pre\r\n  }, [])\r\n  const selected = []\r\n  for (let ele of winCombinations) {\r\n    selected.push(winCountTab[ele])\r\n  }\r\n  const result = selected.reduce((pre, cur) => {\r\n    switch (true) {\r\n      case (cur === 0):\r\n        pre += 1\r\n        break;\r\n      case (cur === 1):\r\n        pre += 5\r\n        break;\r\n      case (cur === 2):\r\n        pre += 20\r\n        break;\r\n      case (cur === 3):\r\n        pre += 50\r\n        break;\r\n      case (cur === 4):\r\n        pre += 100\r\n        break;\r\n      case (cur >= 7):\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return pre\r\n  }, 0)\r\n  return result\r\n}\r\n\r\nexport function findWinner(current, position, identity) {\r\n    const horizontal = current[position[0]].slice(position[1] - 4, position[1] + 5)\r\n\r\n    const vertical = current.reduce((pre, cur, index) => {\r\n      if (index > position[0] + 4 || index < position[0] - 4) return pre\r\n      return pre.concat([cur[position[1]]])\r\n    }, [])\r\n\r\n    const diagonalNegative = current.reduce((pre, cur, index) => {\r\n      if (index > position[0] + 4 || index < position[0] - 4) return pre\r\n      return pre.concat([cur[position[1] + position[0] - index]])\r\n    }, [])\r\n\r\n    const diagonalPositive = current.reduce((pre, cur, index) => {\r\n      if (index > position[0] + 4 || index < position[0] - 4) return pre\r\n      return pre.concat([cur[position[1] - position[0] + index]])\r\n    }, [])\r\n\r\n    const isContinuous = (arr, target, len) => {\r\n      let check = 0\r\n      for (const ele of arr) {\r\n        if (ele === target) {\r\n          check += 1\r\n        } else {\r\n          check = 0\r\n        }\r\n        if (check === len) break\r\n      } \r\n      return (check === len) \r\n    }\r\n\r\n    if (isContinuous(vertical, identity, 5) || isContinuous(horizontal, identity, 5) || isContinuous(diagonalNegative, identity, 5) || isContinuous(diagonalPositive, identity, 5)) return identity\r\n    return null\r\n  }","import { useEffect, useCallback } from 'react'\r\nimport { calculateWinPoint, findWinner } from '../../utils'\r\nimport styled from '@emotion/styled/macro'\r\n\r\n\r\nconst BoardContainer = styled.div`\r\n  width: 560px;\r\n  margin: 0 auto;\r\n  @media screen and (max-width: 768px) {\r\n    width: 290px;\r\n  }\r\n`\r\n\r\nconst boardMargin = 20\r\nconst heightRatio = 1\r\nconst cellAmount = 18\r\nconst crossAmount = cellAmount + 1\r\n\r\nexport default function Board({ setState, state }) {\r\n  const init = () => {\r\n\r\n    const board = document.getElementById(\"board\")\r\n    board.width = parseInt(window.getComputedStyle(board).width, 0) * 2\r\n    board.height = board.width * heightRatio\r\n    const boardWidth = board.width\r\n    const boardHeight = board.height\r\n    const cellWidth = (boardWidth - 2 *  boardMargin) / cellAmount\r\n\r\n    if (board.getContext) {\r\n      const context = board.getContext(\"2d\")\r\n      context.clearRect(0, 0, boardWidth, boardHeight)\r\n\r\n      //畫棋盤\r\n      context.beginPath()\r\n      for(let i = 0; i < crossAmount; i++){\r\n        context.moveTo(cellWidth * i + boardMargin, boardMargin)\r\n        context.lineTo(cellWidth * i + boardMargin, boardWidth - boardMargin)\r\n      }\r\n      for(let j = 0; j < crossAmount; j++){\r\n        context.moveTo(boardMargin, cellWidth * j + boardMargin)\r\n        context.lineTo(boardWidth - boardMargin, cellWidth * j + boardMargin)\r\n      }\r\n      context.stroke()\r\n\r\n      //畫棋子\r\n      const { history } = state\r\n      const current = history[history.length - 1]\r\n      const squares = current.squares\r\n\r\n      squares.forEach((row, rowIndex) => {\r\n        row.forEach((col, colIndex) => {\r\n          if (col === 'B') {\r\n            context.beginPath();\r\n            context.arc(cellWidth * (colIndex - 4) + boardMargin, cellWidth * (rowIndex - 4) + boardMargin, cellWidth / 3, 0, Math.PI * 2)\r\n            context.fillStyle = 'black'\r\n            context.fill()\r\n          }\r\n          if (col === 'W') {\r\n            context.beginPath();\r\n            context.arc(cellWidth * (colIndex - 4) + boardMargin, cellWidth * (rowIndex - 4) + boardMargin, cellWidth / 3, 0, Math.PI * 2)\r\n            context.fillStyle = 'white'\r\n            context.fill()\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  function debounce(func, delay=100) {\r\n    let timer = null\r\n    return () => {\r\n      clearTimeout(timer)\r\n      timer = setTimeout(() => {\r\n        func()\r\n      }, delay)\r\n    }\r\n  }\r\n\r\n  // 每次螢幕大小變化要重畫棋局\r\n  window.addEventListener('resize',\r\n  debounce(init))\r\n\r\n  const handleClick = useCallback((e) => {\r\n    const { mode, blackIsNext, winCombinationTab } = state\r\n    const board = document.getElementById(\"board\")\r\n    const boardWidth = board.width\r\n    const cellWidth = ( boardWidth - 2 * boardMargin ) / cellAmount\r\n\r\n    // 檢查是否已經分出勝負或尚未選擇模式\r\n    if (state.winner || !mode[0]) return\r\n\r\n    // 以棋盤的 (0,0) 位置為原點計算點擊的 x, y 的座標 \r\n    let x = (e.pageX - board.offsetLeft) * 2 - boardMargin\r\n    let y = (e.pageY - board.offsetTop) * 2 - boardMargin\r\n\r\n    // 偏移太多的點擊忽略\r\n    const offsetX = x % cellWidth\r\n    const offsetY = y % cellWidth\r\n    if ((offsetX) > (cellWidth / 3) && (offsetX) <  (cellWidth - cellWidth / 3)) {\r\n       return\r\n    }\r\n    if ((offsetY) > (cellWidth / 3) && (offsetY) <  (cellWidth - cellWidth / 3)) {\r\n       return\r\n    }\r\n\r\n\r\n    // 微調到棋盤的十字上\r\n    x = offsetX <= (cellWidth / 3) ? x - offsetX : x + (cellWidth - offsetX)\r\n    y = offsetY <= (cellWidth / 3) ? y - offsetY : y + (cellWidth - offsetY)\r\n\r\n    // 深拷貝並在狀態上添加棋子\r\n    const history = JSON.parse(JSON.stringify(state)).history\r\n    const current = history[state.stepNumber]\r\n    const squares = JSON.parse(JSON.stringify(current.squares))\r\n    const xIndex = x / cellWidth + 4\r\n    const yIndex = y / cellWidth + 4\r\n\r\n    // 檢查是否已經有落子\r\n    if (state.history[state.stepNumber].squares[yIndex][xIndex]) return\r\n    squares[yIndex][xIndex] = blackIsNext ? 'B' : 'W'\r\n\r\n    // 找出落子位置的獲勝組合\r\n    const winCombinations = winCombinationTab[y / cellWidth][x / cellWidth].reduce((pre, cur, index) => {\r\n    if (cur) {\r\n      pre.push(index)\r\n    }\r\n    return pre\r\n    }, [])\r\n\r\n    // 深拷貝並修改 WinCountTable\r\n    const historyWinCountTab = JSON.parse(JSON.stringify(state)).winCountTab\r\n    const currentWinCountTab = historyWinCountTab[state.stepNumber]\r\n    const winCount = JSON.parse(JSON.stringify(currentWinCountTab.winCount))\r\n    winCombinations.forEach((ele) => {\r\n      // 玩家的獲勝組合棋子數目 + 1，電腦的設為 7\r\n      winCount[0][ele]++\r\n      winCount[1][ele] = 7\r\n    })\r\n\r\n    // 判定勝負\r\n    const winner = findWinner(squares, [yIndex, xIndex], blackIsNext ? 'B' : 'W')\r\n\r\n    setState({\r\n      history: history.concat([{\r\n        squares,\r\n      }]),\r\n      winCombinationTab,\r\n      winCountTab: historyWinCountTab.concat([{\r\n        winCount,\r\n      }]),\r\n      stepNumber: history.length,\r\n      blackIsNext: !blackIsNext,\r\n      mode,\r\n      winner: winner? winner : null\r\n    })\r\n  }, [state, setState])\r\n\r\n  useEffect(() => {\r\n    init()\r\n\r\n    // 計算棋格獲勝分數\r\n    const { mode, blackIsNext, winCombinationTab } = state\r\n    if (mode[0] === 'AI' && blackIsNext!==mode[1] && !state.winner) {\r\n      const history = JSON.parse(JSON.stringify(state)).history\r\n      const current = history[state.stepNumber]\r\n      const squares = JSON.parse(JSON.stringify(current.squares))\r\n\r\n      const historyWinCountTab = JSON.parse(JSON.stringify(state)).winCountTab\r\n      const currentWinCountTab = historyWinCountTab[state.stepNumber]\r\n      const winCount = JSON.parse(JSON.stringify(currentWinCountTab.winCount))\r\n\r\n      const playerMaxPoint = {\r\n        rowIndex: 0,\r\n        colIndex: 0,\r\n        point: 0\r\n      }\r\n      const computerMaxPoint = {\r\n        rowIndex: 0,\r\n        colIndex: 0,\r\n        point: 0\r\n      }\r\n      const slicedSquares = JSON.parse(JSON.stringify(squares))\r\n        .map((ele) => ele.filter((ele, index) => index > 3 && index < crossAmount + 4))\r\n        .filter((ele, index) => index > 3 && index < crossAmount + 4)\r\n\r\n      slicedSquares.forEach((row, rowIndex) => {\r\n        row.forEach((ele, colIndex) => {\r\n          let playerCurrentPoint = ele ? 0 : calculateWinPoint(rowIndex, colIndex, winCombinationTab, winCount[0])\r\n          if (playerCurrentPoint > playerMaxPoint.point) {\r\n            playerMaxPoint.rowIndex = rowIndex\r\n            playerMaxPoint.colIndex = colIndex\r\n            playerMaxPoint.point = playerCurrentPoint\r\n          }\r\n          let computerCurrentPoint = ele ? 0 : calculateWinPoint(rowIndex, colIndex, winCombinationTab, winCount[1])\r\n          if (computerCurrentPoint > computerMaxPoint.point) {\r\n            computerMaxPoint.rowIndex = rowIndex\r\n            computerMaxPoint.colIndex = colIndex\r\n            computerMaxPoint.point = computerCurrentPoint\r\n          }\r\n        })\r\n      })\r\n\r\n      const rowIndex = computerMaxPoint.point >= playerMaxPoint.point ? computerMaxPoint.rowIndex : playerMaxPoint.rowIndex\r\n      const colIndex = computerMaxPoint.point >= playerMaxPoint.point ? computerMaxPoint.colIndex : playerMaxPoint.colIndex\r\n      squares[rowIndex + 4][colIndex + 4] = blackIsNext ? 'B' : 'W'\r\n      const winner = findWinner(squares, [rowIndex + 4, colIndex + 4], state.blackIsNext ? 'B' : 'W')\r\n\r\n      // 找出落子位置的獲勝組合\r\n      const winCombinations = winCombinationTab[rowIndex][colIndex].reduce((pre, cur, index) => {\r\n      if (cur) {\r\n        pre.push(index)\r\n      }\r\n      return pre\r\n      }, [])\r\n\r\n      // 修改 WinTable\r\n      winCombinations.forEach((ele) => {\r\n        winCount[0][ele] = 7\r\n        winCount[1][ele]++\r\n      })\r\n\r\n      setState({\r\n        history: history.concat([{\r\n          squares\r\n        }]),\r\n        winCombinationTab,\r\n        winCountTab: historyWinCountTab.concat([{\r\n          winCount,\r\n        }]),\r\n        stepNumber: history.length,\r\n        blackIsNext: !blackIsNext,\r\n        mode,\r\n        winner\r\n      })\r\n    }\r\n  })\r\n\r\n  return (\r\n    <BoardContainer>\r\n      <canvas\r\n        id=\"board\" \r\n        onClick={handleClick}\r\n      />\r\n    </BoardContainer>\r\n  )\r\n}\r\n\r\n","import styled from '@emotion/styled/macro'\r\nimport { useRef, useCallback } from 'react'\r\n\r\nconst InfoContainer = styled.div`\r\n  width: 560px;\r\n  margin: 0 auto;\r\n  @media screen and (max-width: 768px) {\r\n    width: 290px;\r\n  }\r\n`\r\nconst StatusBar = styled.div`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n  > div + div {\r\n    margin-left: 20px\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    > div + div {\r\n      margin-left: 10px\r\n    }\r\n  }\r\n`\r\nconst Title = styled.div`\r\n  font-weight: bold;\r\n  font-size: 50px;\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 36px\r\n  }\r\n`\r\n\r\nconst Mode = styled.div`\r\n  text-align: left;\r\n  font-size: 16px;\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 12px\r\n  }\r\n`\r\n\r\nconst Status = styled.div`\r\n  text-align: left;\r\n  font-size: 16px;\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 12px\r\n  }\r\n`\r\n\r\nconst Round = styled.div`\r\n  text-align: left;\r\n  font-size: 16px;\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 12px\r\n  }\r\n`\r\n\r\nconst ToolBar = styled.div`\r\n  text-align: center;\r\n  div + div {\r\n    margin-top: 10px\r\n  }\r\n`\r\n\r\nconst History = styled.div`\r\n  text-align: right;\r\n  width: 300px;\r\n  font-size: 20px;\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 12px;\r\n    width: 150px;\r\n  }\r\n`\r\n\r\nconst Input = styled.input`\r\n  border: none;\r\n  border-bottom: 2px solid black;\r\n  line-height: 20px;\r\n  display: inline;\r\n  width: 100px;\r\n  height: 20px;\r\n  padding: 2px;\r\n  :focus {\r\n    outline: none;  \r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 50px;\r\n    height: 10px\r\n  }\r\n`\r\nexport default function Info({ state, setState }) {\r\n  const inputDiv = useRef(null)\r\n  const handleKeyDown = useCallback((e) => {\r\n    if (e.key === 'Enter') {\r\n      const step = Number(inputDiv.current.value)\r\n      inputDiv.current.value = ''\r\n      inputDiv.current.blur()\r\n\r\n      // 檢查要返回的歷史\r\n      if (step < 0 || step >= state.history.length - 1) return\r\n\r\n      const history = JSON.parse(JSON.stringify(state)).history.slice(0, step + 1)\r\n      const winCountTab = JSON.parse(JSON.stringify(state)).winCountTab.slice(0, step + 1)\r\n\r\n      setState({\r\n        history,\r\n        stepNumber: step,\r\n        winCombinationTab: state.winCombinationTab,\r\n        winCountTab,\r\n        blackIsNext: step % 2 ? false : true,\r\n        mode: state.mode,\r\n        winner: null\r\n      })\r\n    }\r\n  }, [state, setState])\r\n\r\n  let status\r\n  const { winner, mode, stepNumber } = state\r\n  if (winner) {\r\n    status = 'Winner: ' + (winner === 'B' ? 'Black' : 'White')\r\n  } else {\r\n    status = 'Next player: ' + (state.blackIsNext ? 'Black' : 'White')\r\n  }\r\n  const selectedMode = mode[0] ? `Mode: ${mode[0]}` : 'Mode: not chosen'\r\n  const round = `Round: ${stepNumber}`\r\n\r\n  return (\r\n    <InfoContainer>\r\n      <Title>Gomoku</Title> \r\n      <StatusBar>\r\n        <div>\r\n          <Round>{round}</Round>\r\n          <Mode>{selectedMode}</Mode>\r\n          <Status>{status}</Status>\r\n        </div>\r\n        <ToolBar>\r\n          <History>\r\n            <label htmlFor=\"history\">Back to history: </label>\r\n            <Input id=\"history\" ref={inputDiv} onKeyDown={handleKeyDown}></Input>\r\n          </History>\r\n        </ToolBar>\r\n      </StatusBar>\r\n    </InfoContainer>\r\n  )\r\n}\r\n\r\n","import { useState, useCallback } from 'react'\r\nimport styled from '@emotion/styled/macro'\r\nimport Board from '../Board'\r\nimport Info from '../Info'\r\nimport { generateWinCombinationTab, generateWinCountTab } from '../../utils'\r\n\r\nconst GameContainer = styled.div`\r\n  text-align: center;\r\n  box-sizing: border-box;\r\n  padding: 12px;\r\n  height: 100%\r\n`\r\n\r\nconst Popup = styled.div`\r\n  display: ${props => props.$showPopup? 'flex;' : 'none;'};\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  position: fixed;\r\n  background-color: white;\r\n  width: 300px;\r\n  height: 50px;\r\n  top: 50%;\r\n  left: 50%;\r\n  z-index: 10;\r\n  transform: translate(-50%, -50%);\r\n  border: 1px solid grey;\r\n  padding: 10px;\r\n  box-shadow: 3px 3px 2px 1px rgba(0, 0, 0, 0.8);\r\n  button + button {\r\n    margin-left: 15px\r\n  }\r\n`\r\nconst OrderPicker = styled.div`\r\n  button + button {\r\n    margin-left: 15px\r\n  }\r\n`\r\n\r\nconst OrderButton = styled.button`\r\n  color: #fff;\r\n  background-color: #6c757d;\r\n  border-color: #6c757d;\r\n`\r\n\r\nconst ModePicker = styled.div`\r\n  margin-top: 20px;\r\n  button + button {\r\n    margin-left: 15px\r\n  }\r\n`\r\n\r\nconst RestartButton = styled.button`\r\n  width: 120px;\r\n  height: 30px;\r\n  color: #fff;\r\n  background-color: #6c757d;\r\n  border-color: #6c757d;\r\n`\r\n\r\nconst AIButton = styled.button`\r\n  width: 120px;\r\n  height: 30px;\r\n  color: #fff;\r\n  background-color: #6c757d;\r\n  border-color: #6c757d;\r\n`\r\n\r\nexport default function GomokuApp() {\r\n  let [showPopup, setShowPopup] = useState(false)\r\n  const [state, setState] = useState({\r\n    history: [{\r\n      squares: Array(27).fill(null).map(() => new Array(27).fill(null))\r\n    }],\r\n    winCombinationTab: generateWinCombinationTab(),\r\n    winCountTab: [{\r\n      winCount: generateWinCountTab()\r\n    }],\r\n    stepNumber: 0,\r\n    blackIsNext: true,\r\n    mode: [null],\r\n    winner: null\r\n  })\r\n  const handleSelectMode = useCallback((e) => {\r\n    if (e.target.classList.contains('normal')) {\r\n      setState({\r\n        history: [{\r\n          squares: Array(27).fill(null).map(() => new Array(27).fill(null))\r\n        }],\r\n        winCombinationTab: generateWinCombinationTab(),\r\n        winCountTab: [{\r\n          winCount: generateWinCountTab()\r\n        }],\r\n        stepNumber: 0,\r\n        blackIsNext: true,\r\n        mode: ['normal'],\r\n        winner: null\r\n      })\r\n    } else {\r\n      setShowPopup(true)\r\n    }\r\n  }, [])\r\n  const handleSelectOrder = useCallback((e) => {\r\n    setState({\r\n      history: [{\r\n        squares: Array(27).fill(null).map(() => new Array(27).fill(null))\r\n      }],\r\n      winCombinationTab: generateWinCombinationTab(),\r\n      winCountTab: [{\r\n        winCount: generateWinCountTab()\r\n      }],\r\n      stepNumber: 0,\r\n      blackIsNext: true,\r\n      mode: ['AI', e.target.classList.contains('black')],\r\n      winner: null\r\n    })\r\n    setShowPopup(false)\r\n  }, [])\r\n  return (\r\n    <GameContainer>\r\n      <Popup $showPopup={showPopup}>\r\n        <div>請選擇你要先手或者後手</div>\r\n        <OrderPicker>\r\n          <OrderButton onClick={handleSelectOrder} className={'black'}>先手</OrderButton>\r\n          <OrderButton onClick={handleSelectOrder} className={'white'}>後手</OrderButton>\r\n        </OrderPicker>\r\n      </Popup>\r\n      <Info state={state} setState={setState}/>\r\n      <Board state={state} setState={setState}/>\r\n      <ModePicker>\r\n        <RestartButton onClick={handleSelectMode} className={'normal'}>開始玩家對戰</RestartButton>\r\n        <AIButton onClick={handleSelectMode} className={'AI'}>開始與電腦對弈</AIButton>\r\n      </ModePicker>\r\n    </GameContainer>\r\n  )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GomokuApp from './components/GomokuApp';\n\nReactDOM.render(\n   <GomokuApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}